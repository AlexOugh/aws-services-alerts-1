AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Cloudformation for Alert System
Parameters:
  CloudWatchLogDestinationName:
    Type: String
    Default: "alertDestination"
    Description: Alert Kinesis Destination Name
  SlackWebHookUrl:
    Type: String
    NoEcho: true
    Description: Slack Webhook Url without 'https://'
  SlackChannel:
    Type: String
    Default: "#alert"
    Description: Slack Channel Name
  TeamsWebHookUrl:
    Type: String
    NoEcho: true
    Description: Teams Webhook Url without 'https://'

Resources:
  EncryptionDecryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption and Decryption key for Lambda"
      KeyPolicy:
        Id: "LambdaEncDec"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Action:
              - "kms:*"
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: '*'
          -
            Sid: "Allow Encryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Encrypt"
            Principal:
              AWS: !GetAtt MessengerLambdaFunctionIAMRole.Arn
            Resource: '*'
          -
            Sid: "Allow Decryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
            Principal:
              AWS: !GetAtt MessengerLambdaFunctionIAMRole.Arn
            Resource: '*'
  AlertStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
  MessengerLambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "kms:*"
                  - "sns:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "kinesis:ListStreams"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                Resource: !GetAtt AlertStream.Arn
  SlackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Alerts-Slack
      Handler: index_slack.handler
      Runtime: nodejs12.x
      CodeUri: ./src
      Role: !GetAtt MessengerLambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          KMS_REGION: !Ref AWS::Region
          KMS_KEY_ID: !Ref EncryptionDecryptionKey
          SLACK_HOOK_URL: !Ref SlackWebHookUrl
          SLACK_CHANNEL: !Ref SlackChannel
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AlertStream.Arn
            StartingPosition: TRIM_HORIZON
  TeamsFunction:
    Type: AWS::Serverless::Function
    DependsOn: SlackFunction
    Properties:
      FunctionName: SungardAS-Alerts-Teams
      Handler: index_teams.handler
      Runtime: nodejs12.x
      CodeUri: ./src
      Role: !GetAtt MessengerLambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          KMS_REGION: !Ref AWS::Region
          KMS_KEY_ID: !Ref EncryptionDecryptionKey
          TEAMS_HOOK_URL: !Ref TeamsWebHookUrl
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AlertStream.Arn
            StartingPosition: TRIM_HORIZON
  TopicFunction:
    Type: AWS::Serverless::Function
    DependsOn: TeamsFunction
    Properties:
      FunctionName: SungardAS-Alerts-Topic
      Handler: index_sns.handler
      Runtime: nodejs12.x
      CodeUri: ./src
      Role: !GetAtt MessengerLambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref AlertTopic
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AlertStream.Arn
            StartingPosition: TRIM_HORIZON
  CWLtoKinesisRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowCloudwatchlogsToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "logs.us-east-1.amazonaws.com"
                - "logs.us-east-2.amazonaws.com"
                - "logs.us-west-1.amazonaws.com"
                - "logs.us-west-2.amazonaws.com"
                - "logs.ca-central-1.amazonaws.com"
                - "logs.ap-south-1.amazonaws.com"
                - "logs.ap-northeast-2.amazonaws.com"
                - "logs.ap-southeast-1.amazonaws.com"
                - "logs.ap-southeast-2.amazonaws.com"
                - "logs.ap-northeast-1.amazonaws.com"
                - "logs.eu-central-1.amazonaws.com"
                - "logs.eu-west-1.amazonaws.com"
                - "logs.eu-west-2.amazonaws.com"
                - "logs.sa-east-1.amazonaws.com"
  CWLtoKinesisRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CWLtoKinesisRolePolicy"
      Roles:
        - !Ref CWLtoKinesisRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "kinesis:PutRecord"
            Resource: !GetAtt AlertStream.Arn
          -
            Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource: !GetAtt CWLtoKinesisRole.Arn
  CloudWatchDestination:
    Type: AWS::Logs::Destination
    DependsOn: SlackFunction
    Properties:
      DestinationName: !Ref CloudWatchLogDestinationName
      RoleArn: !GetAtt CWLtoKinesisRole.Arn
      TargetArn: !GetAtt AlertStream.Arn
      DestinationPolicy: !Join
        - ""
        - - "{\"Version\" : \"2012-10-17\",\"Statement\" : [{\"Effect\" : \"Allow\", \"Principal\" : {\"AWS\" : [\""
          - !Ref "AWS::AccountId"
          - "\"]},\"Action\" : \"logs:PutSubscriptionFilter\", \"Resource\" : \"arn:aws:logs:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":destination:"
          - !Ref CloudWatchLogDestinationName
          - "\"}]}"
  AlertTopic:
    Type: AWS::SNS::Topic
  AlertTopicSubscriptionSteveFriday:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "stephen.friday@sungardas.com"
      Protocol: "email"
      TopicArn: !Ref AlertTopic
      FilterPolicy:
        awsid:
          - "054649790173"
          - "714270045944"
          - "266593598212"
          - "509168795332"
          - "622821376834"
          - "075043220707"
          - "918501388972"
          - "230102524127"
          - "125550332883"
          - "916471192480"
          - "323323747981"
          - "714649453784"
          - "261299584329"
          - "456133170642"
          - "400611118919"
          - "427004835786"
          - "808331752250"
          - "151864458670"
          - "041802784822"
          - "442294194136"
  AlertTopicSubscriptionAlexOugh:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "alex.ough@sungardas.com"
      Protocol: "email"
      TopicArn: !Ref AlertTopic
      FilterPolicy:
        awsid:
          - "089476987273"
          - "876224653878"
  AlertTopicSubscriptionBobPeterson:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "robert.peterson@sungardas.com"
      Protocol: "email"
      TopicArn: !Ref AlertTopic
      FilterPolicy:
        awsid:
          - "735253318557"
          - "467276579997"
          - "282307656817"
          - "326659710197"
          - "978587332037"
  AlertTopicSubscriptionShashankKhanolkar:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "shashank.khanolkar@sungardas.com"
      Protocol: "email"
      TopicArn: !Ref AlertTopic
      FilterPolicy:
        awsid:
          - "784442297447"
          - "445819986646"
          - "060433572191"
          - "404016702201"
          - "737385712994"
  AlertTopicSubscriptionToddLoeppke:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "todd.loeppke@sungardas.com"
      Protocol: "email"
      TopicArn: !Ref AlertTopic
      FilterPolicy:
        awsid:
          - "290093585298"
          - "546276914724"
  AlertTopicSubscriptionYagneshPatel:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "yagnesh.patel@sungardas.com"
      Protocol: "email"
      TopicArn: !Ref AlertTopic
      FilterPolicy:
        awsid:
          - "992852660524"
          - "445750067739"
          - "846805764266"
          - "839460476641"
          - "736798198648"

  PermissionFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "logs:*"
                  - "cloudwatchlogs:*"
                Resource: "*"
  AccountPermissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "SungardAS-Alerts-Permission"
          - !Ref CloudWatchLogDestinationName
      Handler: index_account_permission.handler
      Runtime: nodejs12.x
      CodeUri: ./src
      Role: !GetAtt PermissionFunctionIAMRole.Arn
      Timeout: 300

Outputs:
  SlackAlertLambdaFunction:
    Description: "Slack Alert Lambda Function ARN"
    Value: !GetAtt SlackFunction.Arn
  EncryptionDecryptionKeyId:
    Description: "Encryption Decryption KMS Key Id"
    Value: !Ref EncryptionDecryptionKey
  KinesisStreamArn:
    Description: "Kinesis Alert Stream ARN"
    Value: !GetAtt AlertStream.Arn
  CWLtoKinesisRoleArn:
    Description: "CloudwatchLogs to Kinesis Role ARN"
    Value: !GetAtt CWLtoKinesisRole.Arn
  CloudWatchDestinationArn:
    Description: "CloudWatch Log Destination Arn"
    Value: !GetAtt CloudWatchDestination.Arn
  AccountPermissionFunction:
    Description: "Account Permission Lambda Function ARN"
    Value: !GetAtt AccountPermissionFunction.Arn
